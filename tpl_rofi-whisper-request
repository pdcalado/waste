#!/usr/bin/env bash

set -xeuf -o pipefail

trap 'trap - SIGTERM && kill -- -$$' SIGINT SIGTERM EXIT

rofi_error() {
    rofi -theme-str '* { background: var(red); }' -dmenu -p "$1"
}

# shellcheck disable=SC2157
IS_REMOTE=$([[ -n "$$PROXY_REMOTE_ENDPOINT" ]] && echo true || echo false)

SOCKET=$$WASTE_SOCKET

# check if service is running (local or remote setup)
service_is_running() {
    # if not remote, use systemd
    if [ "$IS_REMOTE" = "false" ]; then
        systemctl --user is-active whisper.service && return 0 || return 1
    fi

    # else, curl health endpoint
    curl --silent --fail --show-error \
        "http://$$PROXY_REMOTE_ENDPOINT/" && return 0 || return 1
}

# request transcription (local or remote setup)
service_request() {
    # if not use socket endpoint
    if [ "$IS_REMOTE" = "false" ]; then
        curl --silent --fail --show-error \
            --unix-socket "$SOCKET" \
            -X POST -G http://localhost/transcribe \
            --url-query "language=$1" \
            --url-query "input=$2"
        return 0
    fi

    # else, use remote endpoint
    curl --silent --fail --show-error \
        "http://$$PROXY_REMOTE_ENDPOINT/transcribe" \
        -X POST \
        --url-query "language=$1" \
        --data-binary @"$2"
    return 0
}

logger -s "Invoking whisper"

# Set the audio source
audio_source=$$AUDIO_DEVICE

# check if audio source is muted
is_muted=$(pacmd list-sources | grep -A 11 "$audio_source" | awk '/muted/ {print $2; exit}')

# if muted print error and exit
if [ "$is_muted" = "yes" ]; then
    rofi_error "Audio source is muted, unmute before speaking"
    exit 1
fi

# check if audio source is busy
is_busy=$(pacmd list-sources | grep -A 6 "$audio_source" | awk '/state/ {print $2; exit}')

# if running or idle, print error and exit
if [ "$is_busy" = "RUNNING" ] || [ "$is_busy" = "IDLE" ]; then
    rofi_error "Audio source is busy ($is_busy), free it and try again"
    exit 1
fi

# if not active print error and exit
if ! service_is_running; then
    # if not remote, start service using systemd
    if [ "$IS_REMOTE" = "false" ]; then
        rofi_error "Whisper was not running, starting service using systemctl"
        exit 1
    fi

    rofi_error "Whisper is not running, check remote service"
    exit 1
fi

# Create a temporary file for the audio to be stored
temp_file16khz=$(mktemp -t "stt-XXXXXXXXXX.wav")

# Find the right microphone
device_string=$(pacmd list-sources | grep -A60 "$audio_source" | grep "device.string = \"" | head -n1 | cut -d'"' -f2)

# Find the number of channels
device_channels=$(pacmd list-sources | grep -A20 "$audio_source" | grep "channel map:" | cut -d':' -f2- | tr ',' '\n' | wc -l)

PID_FILE="/tmp/rofi-whisper-request.pid"

# Record audio from the microphone and save it to the temporary file
arecord --device="$device_string" -f S16_LE -c "$device_channels" -r 16000 --process-id-file "$PID_FILE" "$temp_file16khz" &

# Set language options
language_options=$(echo "$$LANGS" | tr ',' '\n')

# Select language using rofi
lang=$( (echo -e "$language_options";)  | rofi -dmenu -p "Speak now" || true)

logger -s "Selected language: \"$lang\""

# Stop the recording process
kill "$(cat $PID_FILE)"

# if language is empty exit
if [ -z "$lang" ]; then
    logger -s "No language selected"
    exit 0
fi

output=$(service_request "$lang" "$temp_file16khz" | jq '.text' -r | sed "s/^\ //" | sed -f "$$PATTERNS_FILE")

logger -s "$output"

echo -n "$output" | xclip -selection clipboard

dunstify -h "string:bgcolor:#4444FF" "$output" ""
